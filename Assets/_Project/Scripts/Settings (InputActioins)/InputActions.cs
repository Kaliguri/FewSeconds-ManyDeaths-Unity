//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/Scripts/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""ba5b5499-d6a9-4241-bf0f-8031d8d2aa72"",
            ""actions"": [
                {
                    ""name"": ""SelectTile"",
                    ""type"": ""Button"",
                    ""id"": ""f8eecc69-e871-4ccf-a1b8-373dbb654f1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""f6dea3b5-fc76-44c2-b6be-0385f62c3cb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelAction"",
                    ""type"": ""Button"",
                    ""id"": ""103ae896-8143-4457-9066-7fc5f465d8e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillQ"",
                    ""type"": ""Button"",
                    ""id"": ""d1c7c020-4cf8-456c-bc33-b317b95f119a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillW"",
                    ""type"": ""Button"",
                    ""id"": ""5fd4f7ee-ebd5-4570-935f-41081c109fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillE"",
                    ""type"": ""Button"",
                    ""id"": ""0b8285fa-6eab-4165-89f3-adcc842e3b0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillR"",
                    ""type"": ""Button"",
                    ""id"": ""7b8d34e9-18e5-4e4b-9610-099c8ee78984"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""15821045-dc3b-4a3c-aa83-d70c2a91d70b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SelectTile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23b0fcce-63de-4aff-835e-d1813a99acc9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""CancelAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55972330-33ca-4fa8-b057-c38d3dccc6a9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ceadfe5-8070-40e2-9fba-bdaba2d590b5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SkillQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f358433a-f1c4-44a9-9bf5-712fdfad52c1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SkillW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""573bc2be-ccda-4268-bcd0-b80cd418d87b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SkillE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72af10a7-f76f-42f9-a267-a667a37f88e6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SkillR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ade0c86a-263f-45ac-ac40-3cec5f68605b"",
            ""actions"": [
                {
                    ""name"": ""Skip Cutscene"",
                    ""type"": ""Button"",
                    ""id"": ""1404d139-152a-4790-90d3-e4100f4e6cf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Menu"",
                    ""type"": ""Button"",
                    ""id"": ""f237e37c-2a2e-44cc-a5a8-51332ee83841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart Scene"",
                    ""type"": ""Button"",
                    ""id"": ""4a05a982-e2b9-4378-a2a3-91ac793cc994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c3ec64c-6118-4dff-b1f8-81df1e72453a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Skip Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4d00963-9efb-40a6-a615-17d1539ae989"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Open Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1371407-8066-4d54-950f-15129d509681"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Restart Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_SelectTile = m_Combat.FindAction("SelectTile", throwIfNotFound: true);
        m_Combat_MousePosition = m_Combat.FindAction("MousePosition", throwIfNotFound: true);
        m_Combat_CancelAction = m_Combat.FindAction("CancelAction", throwIfNotFound: true);
        m_Combat_SkillQ = m_Combat.FindAction("SkillQ", throwIfNotFound: true);
        m_Combat_SkillW = m_Combat.FindAction("SkillW", throwIfNotFound: true);
        m_Combat_SkillE = m_Combat.FindAction("SkillE", throwIfNotFound: true);
        m_Combat_SkillR = m_Combat.FindAction("SkillR", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_SkipCutscene = m_UI.FindAction("Skip Cutscene", throwIfNotFound: true);
        m_UI_OpenMenu = m_UI.FindAction("Open Menu", throwIfNotFound: true);
        m_UI_RestartScene = m_UI.FindAction("Restart Scene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_SelectTile;
    private readonly InputAction m_Combat_MousePosition;
    private readonly InputAction m_Combat_CancelAction;
    private readonly InputAction m_Combat_SkillQ;
    private readonly InputAction m_Combat_SkillW;
    private readonly InputAction m_Combat_SkillE;
    private readonly InputAction m_Combat_SkillR;
    public struct CombatActions
    {
        private @InputActions m_Wrapper;
        public CombatActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectTile => m_Wrapper.m_Combat_SelectTile;
        public InputAction @MousePosition => m_Wrapper.m_Combat_MousePosition;
        public InputAction @CancelAction => m_Wrapper.m_Combat_CancelAction;
        public InputAction @SkillQ => m_Wrapper.m_Combat_SkillQ;
        public InputAction @SkillW => m_Wrapper.m_Combat_SkillW;
        public InputAction @SkillE => m_Wrapper.m_Combat_SkillE;
        public InputAction @SkillR => m_Wrapper.m_Combat_SkillR;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @SelectTile.started += instance.OnSelectTile;
            @SelectTile.performed += instance.OnSelectTile;
            @SelectTile.canceled += instance.OnSelectTile;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @CancelAction.started += instance.OnCancelAction;
            @CancelAction.performed += instance.OnCancelAction;
            @CancelAction.canceled += instance.OnCancelAction;
            @SkillQ.started += instance.OnSkillQ;
            @SkillQ.performed += instance.OnSkillQ;
            @SkillQ.canceled += instance.OnSkillQ;
            @SkillW.started += instance.OnSkillW;
            @SkillW.performed += instance.OnSkillW;
            @SkillW.canceled += instance.OnSkillW;
            @SkillE.started += instance.OnSkillE;
            @SkillE.performed += instance.OnSkillE;
            @SkillE.canceled += instance.OnSkillE;
            @SkillR.started += instance.OnSkillR;
            @SkillR.performed += instance.OnSkillR;
            @SkillR.canceled += instance.OnSkillR;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @SelectTile.started -= instance.OnSelectTile;
            @SelectTile.performed -= instance.OnSelectTile;
            @SelectTile.canceled -= instance.OnSelectTile;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @CancelAction.started -= instance.OnCancelAction;
            @CancelAction.performed -= instance.OnCancelAction;
            @CancelAction.canceled -= instance.OnCancelAction;
            @SkillQ.started -= instance.OnSkillQ;
            @SkillQ.performed -= instance.OnSkillQ;
            @SkillQ.canceled -= instance.OnSkillQ;
            @SkillW.started -= instance.OnSkillW;
            @SkillW.performed -= instance.OnSkillW;
            @SkillW.canceled -= instance.OnSkillW;
            @SkillE.started -= instance.OnSkillE;
            @SkillE.performed -= instance.OnSkillE;
            @SkillE.canceled -= instance.OnSkillE;
            @SkillR.started -= instance.OnSkillR;
            @SkillR.performed -= instance.OnSkillR;
            @SkillR.canceled -= instance.OnSkillR;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_SkipCutscene;
    private readonly InputAction m_UI_OpenMenu;
    private readonly InputAction m_UI_RestartScene;
    public struct UIActions
    {
        private @InputActions m_Wrapper;
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipCutscene => m_Wrapper.m_UI_SkipCutscene;
        public InputAction @OpenMenu => m_Wrapper.m_UI_OpenMenu;
        public InputAction @RestartScene => m_Wrapper.m_UI_RestartScene;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @SkipCutscene.started += instance.OnSkipCutscene;
            @SkipCutscene.performed += instance.OnSkipCutscene;
            @SkipCutscene.canceled += instance.OnSkipCutscene;
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
            @RestartScene.started += instance.OnRestartScene;
            @RestartScene.performed += instance.OnRestartScene;
            @RestartScene.canceled += instance.OnRestartScene;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @SkipCutscene.started -= instance.OnSkipCutscene;
            @SkipCutscene.performed -= instance.OnSkipCutscene;
            @SkipCutscene.canceled -= instance.OnSkipCutscene;
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
            @RestartScene.started -= instance.OnRestartScene;
            @RestartScene.performed -= instance.OnRestartScene;
            @RestartScene.canceled -= instance.OnRestartScene;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ICombatActions
    {
        void OnSelectTile(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnCancelAction(InputAction.CallbackContext context);
        void OnSkillQ(InputAction.CallbackContext context);
        void OnSkillW(InputAction.CallbackContext context);
        void OnSkillE(InputAction.CallbackContext context);
        void OnSkillR(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSkipCutscene(InputAction.CallbackContext context);
        void OnOpenMenu(InputAction.CallbackContext context);
        void OnRestartScene(InputAction.CallbackContext context);
    }
}
